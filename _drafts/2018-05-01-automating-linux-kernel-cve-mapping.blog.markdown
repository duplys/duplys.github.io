---
layout: post
title:  "Mapping CVE to Code"
date:   2018-04-26 21:52:30 +0100
categories: software, security
---

<script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
</script>

* for research in software security need to validate the method under evaluation on real software vulnerabilities
* the question is then how to identify the exact source code that corresponds to a reported vulnerability
* in this post, I'll show how to do this for the Linux kernel, one of the largest open source code bases out there
* to accomplish this, we'll use `cve-search`, a Common Vulnerabilities and Exposure Web Interface and API provided by CIRCL
* The Computer Incident Response Center Luxembourg (CIRCL) is a government-driven initiative designed to provide a systematic response facility to computer security threats and incidents
* CIRCL is the CERT for the private sector, communes and non-governmental entities in Luxembourg
* CIRCL provides a reliable and trusted point of contact for any users, companies and organizations based in Luxembourg, for the handling of attacks and incidents. Its team of experts acts like a fire brigade, with the ability to react promptly and efficiently whenever threats are suspected, detected or incidents occur.
* CIRCLâ€™s aim is to gather, review, report and respond to cyber threats in a systematic and prompt manner.
* for those interested in playing around, there is a `cve-search` (https://github.com/cve-search/cve-search), a tool to import CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) into a MongoDB to facilitate search and processing of CVEs. The main objective of the software is to avoid doing direct and public lookup into the public CVE databases. This is usually faster to do local lookups and limits your sensitive queries via the Internet.
* In this post, I will instead focus on a simpler way to get the information we want. Namely, we will use the public web API of `cve-search` provided by CIRCL. 
* The HTTP API outputs JSON.
* The API is fully documented at the following location https://cve.circl.lu/api/. You can find some examples of how to use the API at https://www.circl.lu/services/cve-search/. 
* As a first step, we will use the `cve-search` API to get a JSON file containing all the vendors. To do this, fire up a terminal and issue:

```shell
> curl http://cve.circl.lu/api/browse > vendor.json
```

* With the list of all the vendors stored in the file `vendor.json`, we can take a look at the content of this file:

```shell
> head vendor.json
{
    "product": null,
    "vendor": [
        "%240.99_kindle_books_project",
        "1024cms",
        "11in1",
        "129zou",
        "12net",
        "133",
        "163",
```

* Recall that we are interested in the vulnerabilities in the Linux kernel. So, as a next step, let's see if Linux is contained in the vendor list:

```shell
> cat vendor.json | grep linux
        "engardelinux",
        "linux",
        "linux-atm",
        "linux-ha",
        "linux-nfs",
        "linux-nis",
        "linux-sottises",
        "linuxcontainers",
        "linuxfoundation",
        "linuxmint",
        "scientificlinux",
        "standards_based_linux_instrumentation_project",
        "util-linux_project",
```

* the label `linux` looks quite promising, so let's start with that one. To get a JSON data structure containing all products associated to a vendor, in this case to the vendor `linux`, issue:

```shell
> curl http://cve.circl.lu/api/browse/linux > linux_products.json
```

* let's see what "products" are available:

```shell
> cat linux_products.json
{
    "product": [
        "kernel",
        "linux_kernel",
        "linux_kernel-rt"
    ],
    "vendor": "linux"
}
```

* Aha, there's a "product" called "kernel"
* next, we can get all the CVEs for the vendor "linux" belonging to `linux/kernel` (the specific product) by issuing: 

```shell
> curl http://cve.circl.lu/api/search/linux/kernel > linux_kernel.json
```

* let's take a quick look what in that file:

```shell
> head -n 30 linux_kernel.json
[
    {
        "Modified": "2017-07-28T15:29:00.417000",
        "Published": "2017-07-28T15:29:00.417000",
        "cvss": 7.1,
        "cwe": "Unknown",
        "id": "CVE-2017-6259",
        "last-modified": "2017-08-08T12:13:17.257000",
        "references": [
            "http://nvidia.custhelp.com/app/answers/detail/a_id/4525"
        ],
        "summary": "NVIDIA GPU Display Driver contains a vulnerability in the kernel mode layer handler where an incorrect detection and recovery from an invalid state produced by specific user actions may lead to denial of service.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:gpu_driver",
            "cpe:2.3:o:oracle:solaris",
            "cpe:2.3:o:freebsd:freebsd",
            "cpe:2.3:o:linux:kernel"
        ],
        "vulnerable_configuration_cpe_2_2": [
            "cpe:/a:nvidia:gpu_driver:-",
            "cpe:/o:oracle:solaris:-",
            "cpe:/o:freebsd:freebsd:-",
            "cpe:/o:linux:kernel:-"
        ]
    },
    {
        "Modified": "2017-07-28T15:29:00.387000",
        "Published": "2017-07-28T15:29:00.387000",
        "cvss": 7.2,
        "cwe": "CWE-476",
```
 
* OK, it looks like we have the information related to each CVE reported for `linux/kernel`. Each entry in this JSON file is composed of several fields like the CVS score, the corresponding CWE, the CVE id, the textual summary of the vulnerability, etc. I picked more or less a random entry to illustrate this.
* one particular field of interest is `references`. For some of the reported vulnerabilities, it contains a reference to the Linus Torvalds' git clone of the Linux kernel at git.kernel.org/kernel/git/torvalds/

```
{
    "Modified": "2012-03-19T00:00:00",
    "Published": "2010-01-26T13:30:01.057000",
    "access": {
        "authentication": "NONE",
        "complexity": "MEDIUM",
        "vector": "NETWORK"
    },
    "cvss": 7.1,
    "cvss-time": "2010-01-27T09:19:00",
    "cwe": "CWE-20",
    "id": "CVE-2010-0006",
    "impact": {
        "availability": "COMPLETE",
        "confidentiality": "NONE",
        "integrity": "NONE"
    },
    "references": [
        "http://bugs.gentoo.org/show_bug.cgi?id=300951",
        "http://cert.fi/en/reports/2010/vulnerability341748.html",
        "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=2570a4f5428bcdb1077622342181755741e7fa60",
        "http://lists.fedoraproject.org/pipermail/package-announce/2010-January/034250.html",
		...
    ],
    "summary": "The ipv6_hop_jumbo function in net/ipv6/exthdrs.c in the Linux kernel before 2.6.32.4, when network namespaces are enabled, allows remote attackers to cause a denial of service (NULL pointer dereference) via an invalid IPv6 jumbogram, a related issue to CVE-2007-4567.",
    "vulnerable_configuration": [
        "cpe:2.3:o:linux:linux_kernel:2.6.20.20",
		...
    ],
    "vulnerable_configuration_cpe_2_2": [
        "cpe:/o:linux:linux_kernel:2.6.20.20",
		...
    ]
}
```